package com.kh.chap01_abstraction.run;
import com.kh.chap01_abstraction.model.vo.Student;


public class AbstractionRun {
	
	/*
	 * 1. 객체지향언어 : "객체"를 "지향"하는 언어로 "객체 중심"으로 돌아간다고 생각하면됨
	 * 
	 * 2. 객체란 :[시전적 정의] 현실세계에 독립적으로 존재(목적이 있고 가치가 있고 의미가 있는) 하는 모든 것 (유형, 무형, 개념, ...)
	 *          [자바 정의]  메모리 영역 중 heap영역에 만들어지는 모든 것들
	 *           현실세계에서는 객체들간의 상호작용으로 돌아감
	 * 
	 * 3. 객체지향 프로그래밍 : 현실세계에서의 객체들간의 상호작용
	 *                   프로그래밍을 통해 가상세계로 구현하는 과정
	 *                   
	 * 4. 구현하고자 하는 프로그램 상의 필요한 객체들을 만들기 위해서 (즉, 생성하기 위해서)
	 *    : 클래스라는 틀을 먼저 만들어야됨!! (클래스란? 각 객체들의 속성(정보)들을 담아낼 그릇같은 존재)
	 *      >> 어떻게 만들어야하나? ==> 추상화 + 캡슐화 접목해서 만들어야함
	 * 
	 * 5. 추상화 과정
	 *    1) 내가 구현하고자 하는 프로그램에서 필요한 객체들을 생각해볼 것
	 *    2) 그 객체들이 가지는 공통적인 속성, 기능들을 모두 추출할 것
	 * ★      3) 추출한 것들을 가지고 내가 구현하고자 했던 프로그램의 "실질적인 목적"에 맞춰 불필요한 속성, 기능들을 제거할 것
	 *    4) 그렇게 최종적으로 추려진 속성들을 어떤 자료형으로, 어떤 변수명으로 사용할건지 생각
	 *    
	 *    ex) 학생 관리 프로그램
	 *        1) 학생관련객체(홍길동학생, 김영희학생, 김말똥학생...)
	 *        2) 공통적인 속성 및 기능들 (이름, 나이, 주소, 전화번호, 키, 몸무게, 달리기속도, 학년, 반, 국어점수, 수학점수, 영어점수, 머리카락색, 발사이즈, 먹는다, 똥싼다, 잠잔다, ...)
	 *        3) 학생 "인적사항"을 관리하는 프로그램이라고 한다면 : 이름, 나이, 주소, 전화번호
	 *           학생 "성적"을 관리하는 프로그램이라고 한다면 : 이름, 학년, 국어점수, 수학점수 ,영어점수
	 *           학생 "건강"을 관리하는 프로그램이라고 한다면 : 이름, 학년, 반, 키, 몸무게, 달리기속도, 먹는다, 똥싼다, 잠잔다
	 *           
	 *           결국 추려진게 "이름, 나이 , 키"라는 가정하에
	 *           
	 *        4) 이름 : String name;
	 *           나이 : int age;
	 *           키 : double height;
	 *           
	 * 6. 위에 선정된 것들을 가지고 본격적인 프로그래밍을 할껀데...
	 *      
	 *      1) "변수"만으로 프로그래밍을 한다면??
	 *      
	 *       * 변수 - 하나의 자료형의 하나의 값만을 보관할 수 있음
	 *       
	 *         홍길동이라는 학생 객체를 만들어내기 위해서? --> String name1 = "홍길동"; int age1 = 20; double height1 = 162.3;
	 *         김말똥이라는 학생 객체를 만들어내기 위해서? --> String name2 = "김말똥"; int age2 = 21; double height2 = 173.4;
	 *         강개순이라는 학생 객체를 만들어내기 위해서? --> String name3 = "강개순"; int age3 = 22; double height3 = 182.7;
	 *         ... 등등의 수백명에 해당하는 학생들을 만들어야됨
	 *         
	 *         어떤 문제가 발생?? => 수백명에 해당하는 학생들을 만들 때 => 수천개의 변수가 만들어짐! 
	 * 
	 * 		2) "배열"로 프로그래밍일 한다면??
	 *    
	 *        * 배열 - 하나의 자료형에 여러개의 값들을 보관할 수 있음
	 *             
	 *          학생들의 이름을 보관하는 String[] name = {"홍길동", "김말똥", "강개순", ...}
	 *          학생들의 나이를 보관하는       int[]  age  = {  20,     21,     22, ...}
	 *          학생들의    키를 보관하는  double[] height = {162.3, 173.4, 182.7, ...}
	 *          
	 *          어떤 문제가 발생?? => 기존의 학생 정보를 지워야 할 때 뒤의 정보들을 앞으로 땡기는 과정을 진행해야하는데 혹시라도 실수하면 학생의 정보가 뒤바뀔 수 있음
	 *                          새로운 학생 정보를 기록해야될 때 배열의 크기를 변경할 수 없기때문에 새로운 크기의 배열을 만들어서 기존 것을 복사한다거나... 이런식으로 과정이 복잡
	 *                          
	 *                          
	 *       3) 그래서 나온 개념이 구조체의 개념
	 *          
	 *         * 구조체 - 여러개의 자료형에 여러개의 값들을 보관할 수 있음
	 *         
	 *           String값도 보관하고, int값도 보관하고, double값도 보관할 수 있도록 나만의 배열같은 자료형을 만들자! 그게바로 클래스!!
	 *           Student 라는 클래스로 만들꺼임! => 객체의 정보를 보관할 그릇과도 같은 이런 클래스들은 => model.vo
	 * 
	 * 
	 */
	public static void main(String[] args) {
	
		// 클래스(틀) 만든 후  학생객체 만들어보기
		
		// 자바에서의 객체 형태로 만들기 위해서 'new'라는 키워드를 통해 Heap영역에 생성 과정을 거쳐야함!
		// (공간할당)
		
		Student hong = new Student(); // 객체 생성 구문
		//여기까지는 Heap영역에 할당된 공간에는 JVM의 초기값들이 셋팅되어있을 것
		
		//각 영역에 "직접 접근"해서 내가 원하는 값 대입
		//배열에서는 arr[0] = 10;
		hong.name="홍길동";
		hong.age = 20;
		hong.height = 162.3;
		
		System.out.println(hong);      // 이상한 주소값 출력
		System.out.println(hong.name + "님의 나이는 " + hong.age + "이고, 키는 " + hong.height + "cm입니다.");
		//직접 접근을 통해 값 가져옴
		
		
		// 김말똥 학생 객체 만들기
		Student ddong = new Student();
		
		// 값 대입(김말똥/21/172.3)
		ddong.name = "김말똥";
		ddong.age = 21;
		ddong.height = 173.2;
		
		//출력
		System.out.println(ddong);
		System.out.println(ddong.name + "님의 나이는 " + ddong.age + "이고, 키는 " + ddong.height + "cm입니다.");
		
		/*
		 * 필드를 public 접근제한자로 작성
		 * => 그래서 필드에 직접적으로 값을 대입하거나, 가져오는 과정이 가능! => but, 좋지않은 방법!
		 * => 외부에서 함부로 값을 변질시키거나 조회권한이 없는 사람이 값을 쉽게 가져올 수 있는 문제가 발생할 수 있음!
		 *    >> 캡슐화 작업을 할꺼임!!
		 */
	}
}
